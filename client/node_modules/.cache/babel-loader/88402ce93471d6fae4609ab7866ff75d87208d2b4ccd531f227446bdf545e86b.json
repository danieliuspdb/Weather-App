{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\components\\\\CityDropdown.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchCities } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDropdown = ({\n  onSelect,\n  popularCities\n}) => {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadCities = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const data = await fetchCities();\n        setCities(data);\n      } catch (err) {\n        setError('Failed to load cities. Please try again later.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadCities();\n  }, []);\n  const filteredCities = cities.filter(city => city.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"city-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search city...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      onClick: () => setIsOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading cities...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), isOpen && !loading && !error && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown-list\",\n      children: filteredCities.length > 0 ? filteredCities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => {\n          onSelect(city);\n          setIsOpen(false);\n        },\n        children: city.name\n      }, city.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"no-results\",\n        children: \"No cities found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CityDropdown, \"jF0fpQaoOHrDUzdlbUG4JzjM+qo=\");\n_c = CityDropdown;\nexport default CityDropdown;\nvar _c;\n$RefreshReg$(_c, \"CityDropdown\");","map":{"version":3,"names":["React","useState","useEffect","fetchCities","jsxDEV","_jsxDEV","CityDropdown","onSelect","popularCities","_s","cities","setCities","searchTerm","setSearchTerm","isOpen","setIsOpen","loading","setLoading","error","setError","loadCities","data","err","console","filteredCities","filter","city","name","toLowerCase","includes","className","children","type","placeholder","value","onChange","e","target","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","code","_c","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/components/CityDropdown.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchCities } from '../utils/api';\r\n\r\nconst CityDropdown = ({ onSelect, popularCities }) => {\r\n  const [cities, setCities] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadCities = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const data = await fetchCities();\r\n        setCities(data);\r\n      } catch (err) {\r\n        setError('Failed to load cities. Please try again later.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    loadCities();\r\n  }, []);\r\n\r\n  const filteredCities = cities.filter(city =>\r\n    city.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"city-dropdown\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search city...\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        onClick={() => setIsOpen(true)}\r\n      />\r\n      {loading && <div className=\"loading\">Loading cities...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {isOpen && !loading && !error && (\r\n        <ul className=\"dropdown-list\">\r\n          {filteredCities.length > 0 ? (\r\n            filteredCities.map(city => (\r\n              <li key={city.code} onClick={() => {\r\n                onSelect(city);\r\n                setIsOpen(false);\r\n              }}>\r\n                {city.name}\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <li className=\"no-results\">No cities found</li>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityDropdown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}