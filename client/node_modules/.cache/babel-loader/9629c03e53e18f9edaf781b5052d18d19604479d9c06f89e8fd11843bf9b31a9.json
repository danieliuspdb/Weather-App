{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchCities, fetchWeather, logCitySelection } from './utils/api';\nimport CityDropdown from './components/CityDropdown';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport PopularCities from './components/PopularCities';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport './styles/main.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State definitions\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [availableCities, setAvailableCities] = useState([]);\n  const [popularCities, setPopularCities] = useLocalStorage('popularCities', []);\n  const [loading, setLoading] = useState({\n    cities: false,\n    weather: false\n  });\n  const [error, setError] = useState({\n    cities: null,\n    weather: null\n  });\n\n  // Load available cities\n  useEffect(() => {\n    const loadCities = async () => {\n      try {\n        setLoading(prev => ({\n          ...prev,\n          cities: true\n        }));\n        const cities = await fetchCities();\n        setAvailableCities(cities);\n        if (popularCities.length > 0 && !selectedCity) {\n          setSelectedCity(popularCities[0]);\n        }\n      } catch (err) {\n        setError(prev => ({\n          ...prev,\n          cities: 'Failed to load cities'\n        }));\n      } finally {\n        setLoading(prev => ({\n          ...prev,\n          cities: false\n        }));\n      }\n    };\n    loadCities();\n  }, []);\n\n  // Process weather data with robust validation\n  const processWeatherData = apiData => {\n    // First check if the response matches the new API format\n    if (apiData.daily && apiData.hourly) {\n      // New format processing\n      const days = {};\n      apiData.daily.time.forEach((date, i) => {\n        days[date] = {\n          '00:00': {\n            temp: apiData.daily.temperature_2m_max[i],\n            condition: apiData.daily.weather_code[i],\n            wind: apiData.daily.wind_speed_10m_max[i]\n          }\n        };\n      });\n      return days;\n    }\n\n    // Fallback to old format processing\n    if (!apiData.forecastTimestamps) {\n      throw new Error('API response missing both forecastTimestamps and daily/hourly data');\n    }\n    const days = {};\n    apiData.forecastTimestamps.forEach(entry => {\n      const [date, time] = entry.forecastTimeUtc.split(' ');\n      const hour = time.substring(0, 5);\n      if (!days[date]) days[date] = {};\n      days[date][hour] = {\n        temp: entry.airTemperature,\n        condition: entry.conditionCode,\n        wind: entry.windSpeed\n      };\n    });\n    return days;\n  };\n\n  // Load weather data\n  useEffect(() => {\n    if (selectedCity) {\n      const loadWeatherData = async () => {\n        try {\n          setLoading(prev => ({\n            ...prev,\n            weather: true\n          }));\n          setError(prev => ({\n            ...prev,\n            weather: null\n          }));\n          const rawData = await fetchWeather(selectedCity.code);\n          console.log('Raw API Response:', rawData); // Debug log\n\n          const processedData = processWeatherData(rawData);\n          setForecastData(processedData);\n\n          // Set current weather (first available entry)\n          const firstEntry = rawData.daily ? {\n            airTemperature: rawData.daily.temperature_2m_max[0],\n            conditionCode: rawData.daily.weather_code[0]\n          } : rawData.forecastTimestamps[0];\n          setCurrentWeather(firstEntry);\n\n          // Update popular cities\n          setPopularCities(prev => {\n            const updated = [...prev];\n            const existingIndex = updated.findIndex(c => c.code === selectedCity.code);\n            if (existingIndex >= 0) {\n              updated[existingIndex].views = (updated[existingIndex].views || 0) + 1;\n            } else {\n              updated.push({\n                ...selectedCity,\n                views: 1\n              });\n            }\n            return updated.sort((a, b) => b.views - a.views).slice(0, 3);\n          });\n          await logCitySelection(selectedCity);\n        } catch (err) {\n          setError(prev => ({\n            ...prev,\n            weather: `Weather service error: ${err.message}`\n          }));\n          console.error('Weather load failed:', {\n            error: err,\n            city: selectedCity,\n            time: new Date().toISOString()\n          });\n        } finally {\n          setLoading(prev => ({\n            ...prev,\n            weather: false\n          }));\n        }\n      };\n      loadWeatherData();\n    }\n  }, [selectedCity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-section\",\n        children: [/*#__PURE__*/_jsxDEV(CityDropdown, {\n          cities: availableCities,\n          onSelect: setSelectedCity,\n          loading: loading.cities,\n          error: error.cities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), popularCities.length > 0 && /*#__PURE__*/_jsxDEV(PopularCities, {\n          cities: popularCities,\n          onSelect: setSelectedCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), loading.weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading weather data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), error.weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [error.weather, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedCity({\n            ...selectedCity\n          }) // Force re-render\n          ,\n          className: \"retry-btn\",\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), selectedCity && !loading.weather && !error.weather && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          weather: currentWeather,\n          cityName: selectedCity.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this), forecastData && /*#__PURE__*/_jsxDEV(HourlyForecast, {\n          forecastData: forecastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true), process.env.NODE_ENV === 'development' && forecastData && /*#__PURE__*/_jsxDEV(\"details\", {\n        className: \"debug-output\",\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Debug Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify({\n            selectedCity,\n            forecastDays: Object.keys(forecastData),\n            sampleDay: forecastData[Object.keys(forecastData)[0]]\n          }, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"iIQlzst8X4RuEoVxQ2/JBZrlevw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchCities","fetchWeather","logCitySelection","CityDropdown","CurrentWeather","HourlyForecast","PopularCities","useLocalStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedCity","setSelectedCity","currentWeather","setCurrentWeather","forecastData","setForecastData","availableCities","setAvailableCities","popularCities","setPopularCities","loading","setLoading","cities","weather","error","setError","loadCities","prev","length","err","processWeatherData","apiData","daily","hourly","days","time","forEach","date","i","temp","temperature_2m_max","condition","weather_code","wind","wind_speed_10m_max","forecastTimestamps","Error","entry","forecastTimeUtc","split","hour","substring","airTemperature","conditionCode","windSpeed","loadWeatherData","rawData","code","console","log","processedData","firstEntry","updated","existingIndex","findIndex","c","views","push","sort","a","b","slice","message","city","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClick","cityName","name","process","env","NODE_ENV","JSON","stringify","forecastDays","Object","keys","sampleDay","_c","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchCities, fetchWeather, logCitySelection } from './utils/api';\r\nimport CityDropdown from './components/CityDropdown';\r\nimport CurrentWeather from './components/CurrentWeather';\r\nimport HourlyForecast from './components/HourlyForecast';\r\nimport PopularCities from './components/PopularCities';\r\nimport useLocalStorage from './hooks/useLocalStorage';\r\nimport './styles/main.scss';\r\n\r\nconst App = () => {\r\n  // State definitions\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const [availableCities, setAvailableCities] = useState([]);\r\n  const [popularCities, setPopularCities] = useLocalStorage('popularCities', []);\r\n  const [loading, setLoading] = useState({ cities: false, weather: false });\r\n  const [error, setError] = useState({ cities: null, weather: null });\r\n\r\n  // Load available cities\r\n  useEffect(() => {\r\n    const loadCities = async () => {\r\n      try {\r\n        setLoading(prev => ({ ...prev, cities: true }));\r\n        const cities = await fetchCities();\r\n        setAvailableCities(cities);\r\n        if (popularCities.length > 0 && !selectedCity) {\r\n          setSelectedCity(popularCities[0]);\r\n        }\r\n      } catch (err) {\r\n        setError(prev => ({ ...prev, cities: 'Failed to load cities' }));\r\n      } finally {\r\n        setLoading(prev => ({ ...prev, cities: false }));\r\n      }\r\n    };\r\n    loadCities();\r\n  }, []);\r\n\r\n  // Process weather data with robust validation\r\n  const processWeatherData = (apiData) => {\r\n    // First check if the response matches the new API format\r\n    if (apiData.daily && apiData.hourly) {\r\n      // New format processing\r\n      const days = {};\r\n      apiData.daily.time.forEach((date, i) => {\r\n        days[date] = {\r\n          '00:00': {\r\n            temp: apiData.daily.temperature_2m_max[i],\r\n            condition: apiData.daily.weather_code[i],\r\n            wind: apiData.daily.wind_speed_10m_max[i]\r\n          }\r\n        };\r\n      });\r\n      return days;\r\n    }\r\n    \r\n    // Fallback to old format processing\r\n    if (!apiData.forecastTimestamps) {\r\n      throw new Error('API response missing both forecastTimestamps and daily/hourly data');\r\n    }\r\n\r\n    const days = {};\r\n    apiData.forecastTimestamps.forEach(entry => {\r\n      const [date, time] = entry.forecastTimeUtc.split(' ');\r\n      const hour = time.substring(0, 5);\r\n      \r\n      if (!days[date]) days[date] = {};\r\n      days[date][hour] = {\r\n        temp: entry.airTemperature,\r\n        condition: entry.conditionCode,\r\n        wind: entry.windSpeed\r\n      };\r\n    });\r\n\r\n    return days;\r\n  };\r\n\r\n  // Load weather data\r\n  useEffect(() => {\r\n    if (selectedCity) {\r\n      const loadWeatherData = async () => {\r\n        try {\r\n          setLoading(prev => ({ ...prev, weather: true }));\r\n          setError(prev => ({ ...prev, weather: null }));\r\n          \r\n          const rawData = await fetchWeather(selectedCity.code);\r\n          console.log('Raw API Response:', rawData); // Debug log\r\n          \r\n          const processedData = processWeatherData(rawData);\r\n          setForecastData(processedData);\r\n          \r\n          // Set current weather (first available entry)\r\n          const firstEntry = rawData.daily ? {\r\n            airTemperature: rawData.daily.temperature_2m_max[0],\r\n            conditionCode: rawData.daily.weather_code[0]\r\n          } : rawData.forecastTimestamps[0];\r\n          \r\n          setCurrentWeather(firstEntry);\r\n          \r\n          // Update popular cities\r\n          setPopularCities(prev => {\r\n            const updated = [...prev];\r\n            const existingIndex = updated.findIndex(c => c.code === selectedCity.code);\r\n            if (existingIndex >= 0) {\r\n              updated[existingIndex].views = (updated[existingIndex].views || 0) + 1;\r\n            } else {\r\n              updated.push({ ...selectedCity, views: 1 });\r\n            }\r\n            return updated.sort((a, b) => b.views - a.views).slice(0, 3);\r\n          });\r\n\r\n          await logCitySelection(selectedCity);\r\n        } catch (err) {\r\n          setError(prev => ({ \r\n            ...prev, \r\n            weather: `Weather service error: ${err.message}`\r\n          }));\r\n          console.error('Weather load failed:', {\r\n            error: err,\r\n            city: selectedCity,\r\n            time: new Date().toISOString()\r\n          });\r\n        } finally {\r\n          setLoading(prev => ({ ...prev, weather: false }));\r\n        }\r\n      };\r\n\r\n      loadWeatherData();\r\n    }\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header>\r\n        <h1>Weather Forecast</h1>\r\n      </header>\r\n      \r\n      <main>\r\n        <div className=\"search-section\">\r\n          <CityDropdown \r\n            cities={availableCities}\r\n            onSelect={setSelectedCity}\r\n            loading={loading.cities}\r\n            error={error.cities}\r\n          />\r\n          {popularCities.length > 0 && (\r\n            <PopularCities cities={popularCities} onSelect={setSelectedCity} />\r\n          )}\r\n        </div>\r\n\r\n        {loading.weather && (\r\n          <div className=\"loading\">Loading weather data...</div>\r\n        )}\r\n\r\n        {error.weather && (\r\n          <div className=\"error\">\r\n            {error.weather}\r\n            <button \r\n              onClick={() => setSelectedCity({ ...selectedCity })} // Force re-render\r\n              className=\"retry-btn\"\r\n            >\r\n              Retry\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {selectedCity && !loading.weather && !error.weather && (\r\n          <>\r\n            {currentWeather && (\r\n              <CurrentWeather \r\n                weather={currentWeather} \r\n                cityName={selectedCity.name} \r\n              />\r\n            )}\r\n            {forecastData && <HourlyForecast forecastData={forecastData} />}\r\n          </>\r\n        )}\r\n\r\n        {/* Debug output */}\r\n        {process.env.NODE_ENV === 'development' && forecastData && (\r\n          <details className=\"debug-output\">\r\n            <summary>Debug Data</summary>\r\n            <pre>{JSON.stringify({\r\n              selectedCity,\r\n              forecastDays: Object.keys(forecastData),\r\n              sampleDay: forecastData[Object.keys(forecastData)[0]]\r\n            }, null, 2)}</pre>\r\n          </details>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,YAAY,EAAEC,gBAAgB,QAAQ,aAAa;AACzE,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,eAAe,CAAC,eAAe,EAAE,EAAE,CAAC;EAC9E,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC;IAAE4B,MAAM,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAM,CAAC,CAAC;EACzE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC;IAAE4B,MAAM,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;;EAEnE;EACA5B,SAAS,CAAC,MAAM;IACd,MAAM+B,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFL,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,MAAM,EAAE;QAAK,CAAC,CAAC,CAAC;QAC/C,MAAMA,MAAM,GAAG,MAAM1B,WAAW,CAAC,CAAC;QAClCqB,kBAAkB,CAACK,MAAM,CAAC;QAC1B,IAAIJ,aAAa,CAACU,MAAM,GAAG,CAAC,IAAI,CAAClB,YAAY,EAAE;UAC7CC,eAAe,CAACO,aAAa,CAAC,CAAC,CAAC,CAAC;QACnC;MACF,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZJ,QAAQ,CAACE,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,MAAM,EAAE;QAAwB,CAAC,CAAC,CAAC;MAClE,CAAC,SAAS;QACRD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,MAAM,EAAE;QAAM,CAAC,CAAC,CAAC;MAClD;IACF,CAAC;IACDI,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,kBAAkB,GAAIC,OAAO,IAAK;IACtC;IACA,IAAIA,OAAO,CAACC,KAAK,IAAID,OAAO,CAACE,MAAM,EAAE;MACnC;MACA,MAAMC,IAAI,GAAG,CAAC,CAAC;MACfH,OAAO,CAACC,KAAK,CAACG,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;QACtCJ,IAAI,CAACG,IAAI,CAAC,GAAG;UACX,OAAO,EAAE;YACPE,IAAI,EAAER,OAAO,CAACC,KAAK,CAACQ,kBAAkB,CAACF,CAAC,CAAC;YACzCG,SAAS,EAAEV,OAAO,CAACC,KAAK,CAACU,YAAY,CAACJ,CAAC,CAAC;YACxCK,IAAI,EAAEZ,OAAO,CAACC,KAAK,CAACY,kBAAkB,CAACN,CAAC;UAC1C;QACF,CAAC;MACH,CAAC,CAAC;MACF,OAAOJ,IAAI;IACb;;IAEA;IACA,IAAI,CAACH,OAAO,CAACc,kBAAkB,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;IACvF;IAEA,MAAMZ,IAAI,GAAG,CAAC,CAAC;IACfH,OAAO,CAACc,kBAAkB,CAACT,OAAO,CAACW,KAAK,IAAI;MAC1C,MAAM,CAACV,IAAI,EAAEF,IAAI,CAAC,GAAGY,KAAK,CAACC,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC;MACrD,MAAMC,IAAI,GAAGf,IAAI,CAACgB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAEjC,IAAI,CAACjB,IAAI,CAACG,IAAI,CAAC,EAAEH,IAAI,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;MAChCH,IAAI,CAACG,IAAI,CAAC,CAACa,IAAI,CAAC,GAAG;QACjBX,IAAI,EAAEQ,KAAK,CAACK,cAAc;QAC1BX,SAAS,EAAEM,KAAK,CAACM,aAAa;QAC9BV,IAAI,EAAEI,KAAK,CAACO;MACd,CAAC;IACH,CAAC,CAAC;IAEF,OAAOpB,IAAI;EACb,CAAC;;EAED;EACAvC,SAAS,CAAC,MAAM;IACd,IAAIe,YAAY,EAAE;MAChB,MAAM6C,eAAe,GAAG,MAAAA,CAAA,KAAY;QAClC,IAAI;UACFlC,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC;UAChDE,QAAQ,CAACE,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC;UAE9C,MAAMiC,OAAO,GAAG,MAAM3D,YAAY,CAACa,YAAY,CAAC+C,IAAI,CAAC;UACrDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,OAAO,CAAC,CAAC,CAAC;;UAE3C,MAAMI,aAAa,GAAG9B,kBAAkB,CAAC0B,OAAO,CAAC;UACjDzC,eAAe,CAAC6C,aAAa,CAAC;;UAE9B;UACA,MAAMC,UAAU,GAAGL,OAAO,CAACxB,KAAK,GAAG;YACjCoB,cAAc,EAAEI,OAAO,CAACxB,KAAK,CAACQ,kBAAkB,CAAC,CAAC,CAAC;YACnDa,aAAa,EAAEG,OAAO,CAACxB,KAAK,CAACU,YAAY,CAAC,CAAC;UAC7C,CAAC,GAAGc,OAAO,CAACX,kBAAkB,CAAC,CAAC,CAAC;UAEjChC,iBAAiB,CAACgD,UAAU,CAAC;;UAE7B;UACA1C,gBAAgB,CAACQ,IAAI,IAAI;YACvB,MAAMmC,OAAO,GAAG,CAAC,GAAGnC,IAAI,CAAC;YACzB,MAAMoC,aAAa,GAAGD,OAAO,CAACE,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACR,IAAI,KAAK/C,YAAY,CAAC+C,IAAI,CAAC;YAC1E,IAAIM,aAAa,IAAI,CAAC,EAAE;cACtBD,OAAO,CAACC,aAAa,CAAC,CAACG,KAAK,GAAG,CAACJ,OAAO,CAACC,aAAa,CAAC,CAACG,KAAK,IAAI,CAAC,IAAI,CAAC;YACxE,CAAC,MAAM;cACLJ,OAAO,CAACK,IAAI,CAAC;gBAAE,GAAGzD,YAAY;gBAAEwD,KAAK,EAAE;cAAE,CAAC,CAAC;YAC7C;YACA,OAAOJ,OAAO,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,KAAK,GAAGG,CAAC,CAACH,KAAK,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC9D,CAAC,CAAC;UAEF,MAAMzE,gBAAgB,CAACY,YAAY,CAAC;QACtC,CAAC,CAAC,OAAOmB,GAAG,EAAE;UACZJ,QAAQ,CAACE,IAAI,KAAK;YAChB,GAAGA,IAAI;YACPJ,OAAO,EAAE,0BAA0BM,GAAG,CAAC2C,OAAO;UAChD,CAAC,CAAC,CAAC;UACHd,OAAO,CAAClC,KAAK,CAAC,sBAAsB,EAAE;YACpCA,KAAK,EAAEK,GAAG;YACV4C,IAAI,EAAE/D,YAAY;YAClByB,IAAI,EAAE,IAAIuC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UAC/B,CAAC,CAAC;QACJ,CAAC,SAAS;UACRtD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAE;UAAM,CAAC,CAAC,CAAC;QACnD;MACF,CAAC;MAEDgC,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAAC7C,YAAY,CAAC,CAAC;EAElB,oBACEL,OAAA;IAAKuE,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BxE,OAAA;MAAAwE,QAAA,eACExE,OAAA;QAAAwE,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eAET5E,OAAA;MAAAwE,QAAA,gBACExE,OAAA;QAAKuE,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BxE,OAAA,CAACN,YAAY;UACXuB,MAAM,EAAEN,eAAgB;UACxBkE,QAAQ,EAAEvE,eAAgB;UAC1BS,OAAO,EAAEA,OAAO,CAACE,MAAO;UACxBE,KAAK,EAAEA,KAAK,CAACF;QAAO;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,EACD/D,aAAa,CAACU,MAAM,GAAG,CAAC,iBACvBvB,OAAA,CAACH,aAAa;UAACoB,MAAM,EAAEJ,aAAc;UAACgE,QAAQ,EAAEvE;QAAgB;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CACnE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EAEL7D,OAAO,CAACG,OAAO,iBACdlB,OAAA;QAAKuE,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACtD,EAEAzD,KAAK,CAACD,OAAO,iBACZlB,OAAA;QAAKuE,SAAS,EAAC,OAAO;QAAAC,QAAA,GACnBrD,KAAK,CAACD,OAAO,eACdlB,OAAA;UACE8E,OAAO,EAAEA,CAAA,KAAMxE,eAAe,CAAC;YAAE,GAAGD;UAAa,CAAC,CAAE,CAAC;UAAA;UACrDkE,SAAS,EAAC,WAAW;UAAAC,QAAA,EACtB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAEAvE,YAAY,IAAI,CAACU,OAAO,CAACG,OAAO,IAAI,CAACC,KAAK,CAACD,OAAO,iBACjDlB,OAAA,CAAAE,SAAA;QAAAsE,QAAA,GACGjE,cAAc,iBACbP,OAAA,CAACL,cAAc;UACbuB,OAAO,EAAEX,cAAe;UACxBwE,QAAQ,EAAE1E,YAAY,CAAC2E;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CACF,EACAnE,YAAY,iBAAIT,OAAA,CAACJ,cAAc;UAACa,YAAY,EAAEA;QAAa;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,eAC/D,CACH,EAGAK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAI1E,YAAY,iBACrDT,OAAA;QAASuE,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC/BxE,OAAA;UAAAwE,QAAA,EAAS;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAC7B5E,OAAA;UAAAwE,QAAA,EAAMY,IAAI,CAACC,SAAS,CAAC;YACnBhF,YAAY;YACZiF,YAAY,EAAEC,MAAM,CAACC,IAAI,CAAC/E,YAAY,CAAC;YACvCgF,SAAS,EAAEhF,YAAY,CAAC8E,MAAM,CAACC,IAAI,CAAC/E,YAAY,CAAC,CAAC,CAAC,CAAC;UACtD,CAAC,EAAE,IAAI,EAAE,CAAC;QAAC;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CACV;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACxE,EAAA,CAvLID,GAAG;EAAA,QAMmCL,eAAe;AAAA;AAAA4F,EAAA,GANrDvF,GAAG;AAyLT,eAAeA,GAAG;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}