{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\components\\\\HourlyForecast.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTemperature } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HourlyForecast = ({\n  forecastData\n}) => {\n  if (!forecastData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading forecast...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 29\n  }, this);\n\n  // Get sorted dates\n  const dates = Object.keys(forecastData).sort((a, b) => new Date(a) - new Date(b));\n\n  // Define exact hour slots (must match backend)\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hourly-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"5-Day Hourly Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell time-label\",\n          children: \"Date\\\\Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), displayHours.map(hour => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell hour-header\",\n          children: hour.replace(':00', 'h')\n        }, hour, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), dates.slice(0, 5).map(date => {\n        const dateObj = new Date(date);\n        const isToday = new Date().toDateString() === dateObj.toDateString();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-row ${isToday ? 'today' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell date-label\",\n            children: [dateObj.toLocaleDateString('en-US', {\n              weekday: 'short',\n              month: 'short',\n              day: 'numeric'\n            }), isToday && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"today-badge\",\n              children: \"Today\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this), displayHours.map(hour => {\n            var _forecastData$date;\n            const hourData = (_forecastData$date = forecastData[date]) === null || _forecastData$date === void 0 ? void 0 : _forecastData$date[hour];\n            return hourData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-cell\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"temperature\",\n                children: formatTemperature(hourData.temperature)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-indicator\",\n                children: hour.replace(':00', 'h')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"condition\",\n                children: hourData.condition\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 21\n              }, this)]\n            }, `${date}-${hour}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-cell empty\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-indicator\",\n                children: hour.replace(':00', 'h')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this), \"-\"]\n            }, `${date}-${hour}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this);\n          })]\n        }, date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = HourlyForecast;\nHourlyForecast.propTypes = {\n  forecastData: PropTypes.objectOf(PropTypes.objectOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    condition: PropTypes.string.isRequired,\n    windSpeed: PropTypes.number.isRequired,\n    humidity: PropTypes.number\n  })))\n};\nexport default HourlyForecast;\nvar _c;\n$RefreshReg$(_c, \"HourlyForecast\");","map":{"version":3,"names":["React","PropTypes","formatTemperature","jsxDEV","_jsxDEV","HourlyForecast","forecastData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dates","Object","keys","sort","a","b","Date","displayHours","map","hour","replace","slice","date","dateObj","isToday","toDateString","toLocaleDateString","weekday","month","day","_forecastData$date","hourData","temperature","condition","_c","propTypes","objectOf","shape","number","isRequired","string","windSpeed","humidity","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/components/HourlyForecast.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatTemperature } from '../utils/helpers';\r\n\r\nconst HourlyForecast = ({ forecastData }) => {\r\n  if (!forecastData) return <div className=\"loading\">Loading forecast...</div>;\r\n\r\n  // Get sorted dates\r\n  const dates = Object.keys(forecastData).sort((a, b) => new Date(a) - new Date(b));\r\n  \r\n  // Define exact hour slots (must match backend)\r\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\r\n\r\n  return (\r\n    <div className=\"hourly-forecast\">\r\n      <h2>5-Day Hourly Forecast</h2>\r\n      <div className=\"forecast-grid\">\r\n        {/* Header */}\r\n        <div className=\"grid-row header\">\r\n          <div className=\"grid-cell time-label\">Date\\Time</div>\r\n          {displayHours.map(hour => (\r\n            <div key={hour} className=\"grid-cell hour-header\">\r\n              {hour.replace(':00', 'h')}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Rows */}\r\n        {dates.slice(0, 5).map(date => {\r\n          const dateObj = new Date(date);\r\n          const isToday = new Date().toDateString() === dateObj.toDateString();\r\n          \r\n          return (\r\n            <div key={date} className={`grid-row ${isToday ? 'today' : ''}`}>\r\n              <div className=\"grid-cell date-label\">\r\n                {dateObj.toLocaleDateString('en-US', { \r\n                  weekday: 'short', \r\n                  month: 'short', \r\n                  day: 'numeric' \r\n                })}\r\n                {isToday && <span className=\"today-badge\">Today</span>}\r\n              </div>\r\n              \r\n              {displayHours.map(hour => {\r\n                const hourData = forecastData[date]?.[hour];\r\n                \r\n                return hourData ? (\r\n                  <div key={`${date}-${hour}`} className=\"grid-cell\">\r\n                    <div className=\"temperature\">\r\n                      {formatTemperature(hourData.temperature)}\r\n                    </div>\r\n                    <div className=\"time-indicator\">{hour.replace(':00', 'h')}</div>\r\n                    <div className=\"condition\">{hourData.condition}</div>\r\n                  </div>\r\n                ) : (\r\n                  <div key={`${date}-${hour}`} className=\"grid-cell empty\">\r\n                    <div className=\"time-indicator\">{hour.replace(':00', 'h')}</div>\r\n                    -\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHourlyForecast.propTypes = {\r\n  forecastData: PropTypes.objectOf(\r\n    PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        condition: PropTypes.string.isRequired,\r\n        windSpeed: PropTypes.number.isRequired,\r\n        humidity: PropTypes.number\r\n      })\r\n    )\r\n  )\r\n};\r\n\r\nexport default HourlyForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}