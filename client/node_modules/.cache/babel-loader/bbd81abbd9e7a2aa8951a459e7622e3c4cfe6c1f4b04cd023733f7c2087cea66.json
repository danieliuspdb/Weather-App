{"ast":null,"code":"export const fetchCities = async () => {\n  try {\n    const response = await fetch('http://localhost:5000/api/cities');\n    if (!response.ok) throw new Error('Network response was not ok');\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch cities:', error);\n    throw error;\n  }\n};\nexport const fetchWeather = async cityCode => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/weather/${cityCode}`);\n    if (!response.ok) throw new Error('Network response was not ok');\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to fetch weather:', error);\n    throw error;\n  }\n};\nexport const logCitySelection = async city => {\n  try {\n    await fetch('http://localhost:5000/api/logs', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        city: city.name,\n        timestamp: new Date().toISOString()\n      })\n    });\n  } catch (error) {\n    console.error('Failed to log city selection:', error);\n  }\n};","map":{"version":3,"names":["fetchCities","response","fetch","ok","Error","json","error","console","fetchWeather","cityCode","logCitySelection","city","method","headers","body","JSON","stringify","name","timestamp","Date","toISOString"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/utils/api.js"],"sourcesContent":["export const fetchCities = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/cities');\r\n    if (!response.ok) throw new Error('Network response was not ok');\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Failed to fetch cities:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchWeather = async (cityCode) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/weather/${cityCode}`);\r\n    if (!response.ok) throw new Error('Network response was not ok');\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Failed to fetch weather:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logCitySelection = async (city) => {\r\n  try {\r\n    await fetch('http://localhost:5000/api/logs', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ \r\n        city: city.name, \r\n        timestamp: new Date().toISOString() \r\n      }),\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to log city selection:', error);\r\n  }\r\n};"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;IAChE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCO,QAAQ,EAAE,CAAC;IAC7E,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMT,KAAK,CAAC,gCAAgC,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBL,IAAI,EAAEA,IAAI,CAACM,IAAI;QACfC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}