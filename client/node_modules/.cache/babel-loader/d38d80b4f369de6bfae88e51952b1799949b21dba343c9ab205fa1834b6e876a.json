{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\components\\\\HourlyForecast.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTemperature } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HourlyForecast = ({\n  forecastData\n}) => {\n  if (!forecastData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading forecast...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 29\n  }, this);\n\n  // Get sorted dates from the forecast data\n  const dates = Object.keys(forecastData).sort();\n\n  // Define the hours we want to display (3-hour intervals)\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\n\n  // Function to format date display\n  const formatDisplayDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hourly-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"5-Day Hourly Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell time-label\",\n          children: \"Time \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), displayHours.map(hour => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell hour-header\",\n          children: hour\n        }, hour, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), dates.slice(0, 5).map(date => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell date-label\",\n          children: formatDisplayDate(date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), displayHours.map(hour => {\n          var _forecastData$date;\n          const hourData = (_forecastData$date = forecastData[date]) === null || _forecastData$date === void 0 ? void 0 : _forecastData$date[hour];\n          if (!hourData) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-cell empty\",\n              children: \"-\"\n            }, `${date}-${hour}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temperature\",\n              children: formatTemperature(hourData.temperature)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"condition\",\n              children: hourData.condition\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wind\",\n              children: [hourData.windSpeed, \" m/s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this), hourData.humidity && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"humidity\",\n              children: [hourData.humidity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 21\n            }, this)]\n          }, `${date}-${hour}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this);\n        })]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = HourlyForecast;\nHourlyForecast.propTypes = {\n  forecastData: PropTypes.objectOf(PropTypes.objectOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    condition: PropTypes.string.isRequired,\n    windSpeed: PropTypes.number.isRequired,\n    humidity: PropTypes.number\n  })))\n};\nexport default HourlyForecast;\nvar _c;\n$RefreshReg$(_c, \"HourlyForecast\");","map":{"version":3,"names":["React","PropTypes","formatTemperature","jsxDEV","_jsxDEV","HourlyForecast","forecastData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dates","Object","keys","sort","displayHours","formatDisplayDate","dateString","date","Date","toLocaleDateString","weekday","month","day","map","hour","slice","_forecastData$date","hourData","temperature","condition","windSpeed","humidity","_c","propTypes","objectOf","shape","number","isRequired","string","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/components/HourlyForecast.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatTemperature } from '../utils/helpers';\r\n\r\nconst HourlyForecast = ({ forecastData }) => {\r\n  if (!forecastData) return <div className=\"loading\">Loading forecast...</div>;\r\n\r\n  // Get sorted dates from the forecast data\r\n  const dates = Object.keys(forecastData).sort();\r\n  \r\n  // Define the hours we want to display (3-hour intervals)\r\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\r\n\r\n  // Function to format date display\r\n  const formatDisplayDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', { \r\n      weekday: 'short', \r\n      month: 'short', \r\n      day: 'numeric' \r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"hourly-forecast\">\r\n      <h2>5-Day Hourly Forecast</h2>\r\n      <div className=\"forecast-grid\">\r\n        {/* Header row with hours */}\r\n        <div className=\"grid-row header\">\r\n          <div className=\"grid-cell time-label\">Time â†’</div>\r\n          {displayHours.map(hour => (\r\n            <div key={hour} className=\"grid-cell hour-header\">{hour}</div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Forecast rows for each day */}\r\n        {dates.slice(0, 5).map(date => (\r\n          <div key={date} className=\"grid-row\">\r\n            <div className=\"grid-cell date-label\">\r\n              {formatDisplayDate(date)}\r\n            </div>\r\n            \r\n            {displayHours.map(hour => {\r\n              const hourData = forecastData[date]?.[hour];\r\n              \r\n              if (!hourData) {\r\n                return (\r\n                  <div key={`${date}-${hour}`} className=\"grid-cell empty\">\r\n                    -\r\n                  </div>\r\n                );\r\n              }\r\n\r\n              return (\r\n                <div key={`${date}-${hour}`} className=\"grid-cell\">\r\n                  <div className=\"temperature\">\r\n                    {formatTemperature(hourData.temperature)}\r\n                  </div>\r\n                  <div className=\"condition\">\r\n                    {hourData.condition}\r\n                  </div>\r\n                  <div className=\"wind\">\r\n                    {hourData.windSpeed} m/s\r\n                  </div>\r\n                  {hourData.humidity && (\r\n                    <div className=\"humidity\">\r\n                      {hourData.humidity}%\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHourlyForecast.propTypes = {\r\n  forecastData: PropTypes.objectOf(\r\n    PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        condition: PropTypes.string.isRequired,\r\n        windSpeed: PropTypes.number.isRequired,\r\n        humidity: PropTypes.number\r\n      })\r\n    )\r\n  )\r\n};\r\n\r\nexport default HourlyForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}