{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\components\\\\HourlyForecast.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatTemperature } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HourlyForecast = ({\n  forecastData,\n  cityName\n}) => {\n  if (!forecastData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading forecast...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 29\n  }, this);\n  const dates = Object.keys(forecastData).sort();\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hourly-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Hourly Forecast for \", cityName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell time-label\",\n          children: \"Time \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), displayHours.map(hour => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell hour-header\",\n          children: hour\n        }, hour, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), dates.slice(0, 5).map(date => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell date-label\",\n          children: new Date(date).toLocaleDateString('en-US', {\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), displayHours.map(hour => {\n          var _forecastData$date;\n          const hourData = (_forecastData$date = forecastData[date]) === null || _forecastData$date === void 0 ? void 0 : _forecastData$date[hour];\n          return hourData ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temperature\",\n              children: formatTemperature(hourData.temperature)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-indicator\",\n              children: hour.replace(':00', 'h')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this)]\n          }, `${date}-${hour}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell empty\",\n            children: \"-\"\n          }, `${date}-${hour}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this);\n        })]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = HourlyForecast;\nHourlyForecast.propTypes = {\n  forecastData: PropTypes.object.isRequired,\n  cityName: PropTypes.string.isRequired\n};\nexport default HourlyForecast;\nvar _c;\n$RefreshReg$(_c, \"HourlyForecast\");","map":{"version":3,"names":["React","PropTypes","formatTemperature","jsxDEV","_jsxDEV","HourlyForecast","forecastData","cityName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dates","Object","keys","sort","displayHours","map","hour","slice","date","Date","toLocaleDateString","weekday","month","day","_forecastData$date","hourData","temperature","replace","_c","propTypes","object","isRequired","string","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/components/HourlyForecast.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatTemperature } from '../utils/helpers';\r\n\r\nconst HourlyForecast = ({ forecastData, cityName }) => {\r\n  if (!forecastData) return <div className=\"loading\">Loading forecast...</div>;\r\n\r\n  const dates = Object.keys(forecastData).sort();\r\n  const displayHours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'];\r\n\r\n  return (\r\n    <div className=\"hourly-forecast\">\r\n      <div className=\"location-header\">\r\n        <h2>Hourly Forecast for {cityName}</h2>\r\n      </div>\r\n\r\n      <div className=\"forecast-grid\">\r\n        <div className=\"grid-row header\">\r\n          <div className=\"grid-cell time-label\">Time â†’</div>\r\n          {displayHours.map(hour => (\r\n            <div key={hour} className=\"grid-cell hour-header\">{hour}</div>\r\n          ))}\r\n        </div>\r\n\r\n        {dates.slice(0, 5).map(date => (\r\n          <div key={date} className=\"grid-row\">\r\n            <div className=\"grid-cell date-label\">\r\n              {new Date(date).toLocaleDateString('en-US', { \r\n                weekday: 'short', \r\n                month: 'short', \r\n                day: 'numeric' \r\n              })}\r\n            </div>\r\n            \r\n            {displayHours.map(hour => {\r\n              const hourData = forecastData[date]?.[hour];\r\n              \r\n              return hourData ? (\r\n                <div key={`${date}-${hour}`} className=\"grid-cell\">\r\n                  <div className=\"temperature\">\r\n                    {formatTemperature(hourData.temperature)}\r\n                  </div>\r\n                  <div className=\"time-indicator\">{hour.replace(':00', 'h')}</div>\r\n                </div>\r\n              ) : (\r\n                <div key={`${date}-${hour}`} className=\"grid-cell empty\">\r\n                  -\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHourlyForecast.propTypes = {\r\n  forecastData: PropTypes.object.isRequired,\r\n  cityName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default HourlyForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}