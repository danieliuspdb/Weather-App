{"ast":null,"code":"const axios = require('axios');\nconst router = require('express').Router();\n\n// Weather endpoint with error handling\nrouter.get('/weather/:cityCode', async (req, res) => {\n  try {\n    const {\n      cityCode\n    } = req.params;\n\n    // Validate city code format\n    if (!/^[a-z-]+$/.test(cityCode)) {\n      return res.status(400).json({\n        error: 'Invalid city code format'\n      });\n    }\n    const response = await axios.get(`https://api.meteo.lt/v1/places/${cityCode}/forecasts/long-term`, {\n      timeout: 5000\n    });\n    res.json(response.data);\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('Weather API error:', {\n      cityCode: req.params.cityCode,\n      status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n      message: error.message\n    });\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      res.status(404).json({\n        error: 'City not found in weather service'\n      });\n    } else {\n      res.status(502).json({\n        error: 'Weather service unavailable',\n        details: error.message\n      });\n    }\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["axios","require","router","Router","get","req","res","cityCode","params","test","status","json","error","response","timeout","data","_error$response","_error$response2","console","message","details","module","exports"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/utils/api.js"],"sourcesContent":["const axios = require('axios');\r\nconst router = require('express').Router();\r\n\r\n// Weather endpoint with error handling\r\nrouter.get('/weather/:cityCode', async (req, res) => {\r\n  try {\r\n    const { cityCode } = req.params;\r\n    \r\n    // Validate city code format\r\n    if (!/^[a-z-]+$/.test(cityCode)) {\r\n      return res.status(400).json({ error: 'Invalid city code format' });\r\n    }\r\n\r\n    const response = await axios.get(\r\n      `https://api.meteo.lt/v1/places/${cityCode}/forecasts/long-term`,\r\n      { timeout: 5000 }\r\n    );\r\n\r\n    res.json(response.data);\r\n  } catch (error) {\r\n    console.error('Weather API error:', {\r\n      cityCode: req.params.cityCode,\r\n      status: error.response?.status,\r\n      message: error.message\r\n    });\r\n\r\n    if (error.response?.status === 404) {\r\n      res.status(404).json({ error: 'City not found in weather service' });\r\n    } else {\r\n      res.status(502).json({ \r\n        error: 'Weather service unavailable',\r\n        details: error.message\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACE,MAAM,CAAC,CAAC;;AAE1C;AACAD,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnD,IAAI;IACF,MAAM;MAAEC;IAAS,CAAC,GAAGF,GAAG,CAACG,MAAM;;IAE/B;IACA,IAAI,CAAC,WAAW,CAACC,IAAI,CAACF,QAAQ,CAAC,EAAE;MAC/B,OAAOD,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2B,CAAC,CAAC;IACpE;IAEA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACI,GAAG,CAC9B,kCAAkCG,QAAQ,sBAAsB,EAChE;MAAEO,OAAO,EAAE;IAAK,CAClB,CAAC;IAEDR,GAAG,CAACK,IAAI,CAACE,QAAQ,CAACE,IAAI,CAAC;EACzB,CAAC,CAAC,OAAOH,KAAK,EAAE;IAAA,IAAAI,eAAA,EAAAC,gBAAA;IACdC,OAAO,CAACN,KAAK,CAAC,oBAAoB,EAAE;MAClCL,QAAQ,EAAEF,GAAG,CAACG,MAAM,CAACD,QAAQ;MAC7BG,MAAM,GAAAM,eAAA,GAAEJ,KAAK,CAACC,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBN,MAAM;MAC9BS,OAAO,EAAEP,KAAK,CAACO;IACjB,CAAC,CAAC;IAEF,IAAI,EAAAF,gBAAA,GAAAL,KAAK,CAACC,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBP,MAAM,MAAK,GAAG,EAAE;MAClCJ,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAoC,CAAC,CAAC;IACtE,CAAC,MAAM;MACLN,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,KAAK,EAAE,6BAA6B;QACpCQ,OAAO,EAAER,KAAK,CAACO;MACjB,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGpB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}