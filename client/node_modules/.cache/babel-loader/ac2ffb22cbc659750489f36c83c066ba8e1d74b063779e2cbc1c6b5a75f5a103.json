{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\OneDrive\\\\Desktop\\\\IBM\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchCities, fetchWeather, logCitySelection } from './utils/api';\nimport CityDropdown from './components/CityDropdown';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport PopularCities from './components/PopularCities';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport './styles/main.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State definitions\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [availableCities, setAvailableCities] = useState([]);\n  const [popularCities, setPopularCities] = useLocalStorage('popularCities', []);\n  const [loading, setLoading] = useState({\n    cities: false,\n    weather: false\n  });\n  const [error, setError] = useState({\n    cities: null,\n    weather: null\n  });\n\n  // Load available cities on first render\n  useEffect(() => {\n    const loadCities = async () => {\n      try {\n        setLoading(prev => ({\n          ...prev,\n          cities: true\n        }));\n        setError(prev => ({\n          ...prev,\n          cities: null\n        }));\n        const cities = await fetchCities();\n        setAvailableCities(cities);\n\n        // Auto-select the first popular city if available\n        if (popularCities.length > 0 && !selectedCity) {\n          setSelectedCity(popularCities[0]);\n        }\n      } catch (err) {\n        setError(prev => ({\n          ...prev,\n          cities: 'Failed to load cities list'\n        }));\n        console.error('Cities load error:', err);\n      } finally {\n        setLoading(prev => ({\n          ...prev,\n          cities: false\n        }));\n      }\n    };\n    loadCities();\n  }, []);\n\n  // Process weather data into days and hours\n  const processWeatherData = apiData => {\n    // Validate basic structure\n    if (!apiData || !apiData.forecastTimestamps || !Array.isArray(apiData.forecastTimestamps)) {\n      throw new Error('API response missing forecastTimestamps array');\n    }\n\n    // Check for minimum data\n    if (apiData.forecastTimestamps.length === 0) {\n      throw new Error('Empty forecast data received');\n    }\n    const days = {};\n    let validEntries = 0;\n    apiData.forecastTimestamps.forEach(entry => {\n      try {\n        // Validate required fields\n        if (!entry.forecastTimeUtc || typeof entry.airTemperature === 'undefined') {\n          throw new Error('Missing required weather fields');\n        }\n        const [date, time] = entry.forecastTimeUtc.split(' ');\n        const hour = time.substring(0, 5); // Get HH:MM format\n\n        if (!days[date]) days[date] = {};\n        days[date][hour] = {\n          temp: entry.airTemperature,\n          condition: entry.conditionCode || 'N/A',\n          wind: entry.windSpeed || 'N/A',\n          humidity: entry.relativeHumidity || 'N/A'\n        };\n        validEntries++;\n      } catch (entryError) {\n        console.warn('Skipping invalid forecast entry:', {\n          error: entryError.message,\n          entry\n        });\n      }\n    });\n\n    // Verify we have sufficient data\n    if (validEntries < 24) {\n      // At least 24 hours of data\n      throw new Error(`Insufficient valid forecast data (${validEntries} entries)`);\n    }\n    return days;\n  };\n\n  // Load weather when city is selected\n  useEffect(() => {\n    if (selectedCity) {\n      const loadWeatherData = async () => {\n        try {\n          setLoading(prev => ({\n            ...prev,\n            weather: true\n          }));\n          setError(prev => ({\n            ...prev,\n            weather: null\n          }));\n          const rawData = await fetchWeather(selectedCity.code);\n          const processedData = processWeatherData(rawData);\n          setCurrentWeather(rawData.forecastTimestamps[0]);\n          setForecastData(processedData);\n\n          // Update popular cities\n          setPopularCities(prev => {\n            const updated = [...prev];\n            const existingIndex = updated.findIndex(c => c.code === selectedCity.code);\n            if (existingIndex >= 0) {\n              updated[existingIndex].views = (updated[existingIndex].views || 0) + 1;\n            } else {\n              updated.push({\n                ...selectedCity,\n                views: 1\n              });\n            }\n            return updated.sort((a, b) => b.views - a.views).slice(0, 3);\n          });\n          await logCitySelection(selectedCity);\n        } catch (err) {\n          setError(prev => ({\n            ...prev,\n            weather: `Failed to load weather: ${err.message}`\n          }));\n          console.error('Weather processing failed:', {\n            error: err,\n            city: selectedCity,\n            time: new Date().toISOString()\n          });\n        } finally {\n          setLoading(prev => ({\n            ...prev,\n            weather: false\n          }));\n        }\n      };\n      loadWeatherData();\n    }\n  }, [selectedCity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-section\",\n        children: [/*#__PURE__*/_jsxDEV(CityDropdown, {\n          cities: availableCities,\n          onSelect: setSelectedCity,\n          popularCities: popularCities,\n          loading: loading.cities,\n          error: error.cities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), popularCities.length > 0 && /*#__PURE__*/_jsxDEV(PopularCities, {\n          cities: popularCities,\n          onSelect: setSelectedCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), loading.weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), \"Loading weather data...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), error.weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: error.weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedCity({\n            ...selectedCity\n          }) // Force re-fetch\n          ,\n          className: \"retry-button\",\n          children: \"\\u21BB Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), selectedCity && !loading.weather && !error.weather && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          weather: currentWeather,\n          cityName: selectedCity.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this), forecastData && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(HourlyForecast, {\n            forecastData: forecastData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"details\", {\n            className: \"debug-view\",\n            children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n              children: \"Raw API Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify({\n                selectedCity,\n                currentWeather,\n                forecastSample: Object.keys(forecastData).map(date => ({\n                  date,\n                  hours: Object.keys(forecastData[date]).length\n                }))\n              }, null, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"iIQlzst8X4RuEoVxQ2/JBZrlevw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchCities","fetchWeather","logCitySelection","CityDropdown","CurrentWeather","HourlyForecast","PopularCities","useLocalStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedCity","setSelectedCity","currentWeather","setCurrentWeather","forecastData","setForecastData","availableCities","setAvailableCities","popularCities","setPopularCities","loading","setLoading","cities","weather","error","setError","loadCities","prev","length","err","console","processWeatherData","apiData","forecastTimestamps","Array","isArray","Error","days","validEntries","forEach","entry","forecastTimeUtc","airTemperature","date","time","split","hour","substring","temp","condition","conditionCode","wind","windSpeed","humidity","relativeHumidity","entryError","warn","message","loadWeatherData","rawData","code","processedData","updated","existingIndex","findIndex","c","views","push","sort","a","b","slice","city","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClick","cityName","name","process","env","NODE_ENV","JSON","stringify","forecastSample","Object","keys","map","hours","_c","$RefreshReg$"],"sources":["C:/Users/danie/OneDrive/Desktop/IBM/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchCities, fetchWeather, logCitySelection } from './utils/api';\r\nimport CityDropdown from './components/CityDropdown';\r\nimport CurrentWeather from './components/CurrentWeather';\r\nimport HourlyForecast from './components/HourlyForecast';\r\nimport PopularCities from './components/PopularCities';\r\nimport useLocalStorage from './hooks/useLocalStorage';\r\nimport './styles/main.scss';\r\n\r\nconst App = () => {\r\n  // State definitions\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const [availableCities, setAvailableCities] = useState([]);\r\n  const [popularCities, setPopularCities] = useLocalStorage('popularCities', []);\r\n  const [loading, setLoading] = useState({ cities: false, weather: false });\r\n  const [error, setError] = useState({ cities: null, weather: null });\r\n\r\n  // Load available cities on first render\r\n  useEffect(() => {\r\n    const loadCities = async () => {\r\n      try {\r\n        setLoading(prev => ({ ...prev, cities: true }));\r\n        setError(prev => ({ ...prev, cities: null }));\r\n        \r\n        const cities = await fetchCities();\r\n        setAvailableCities(cities);\r\n        \r\n        // Auto-select the first popular city if available\r\n        if (popularCities.length > 0 && !selectedCity) {\r\n          setSelectedCity(popularCities[0]);\r\n        }\r\n      } catch (err) {\r\n        setError(prev => ({ ...prev, cities: 'Failed to load cities list' }));\r\n        console.error('Cities load error:', err);\r\n      } finally {\r\n        setLoading(prev => ({ ...prev, cities: false }));\r\n      }\r\n    };\r\n\r\n    loadCities();\r\n  }, []);\r\n\r\n  // Process weather data into days and hours\r\n  const processWeatherData = (apiData) => {\r\n    // Validate basic structure\r\n    if (!apiData || !apiData.forecastTimestamps || !Array.isArray(apiData.forecastTimestamps)) {\r\n      throw new Error('API response missing forecastTimestamps array');\r\n    }\r\n\r\n    // Check for minimum data\r\n    if (apiData.forecastTimestamps.length === 0) {\r\n      throw new Error('Empty forecast data received');\r\n    }\r\n\r\n    const days = {};\r\n    let validEntries = 0;\r\n\r\n    apiData.forecastTimestamps.forEach(entry => {\r\n      try {\r\n        // Validate required fields\r\n        if (!entry.forecastTimeUtc || typeof entry.airTemperature === 'undefined') {\r\n          throw new Error('Missing required weather fields');\r\n        }\r\n\r\n        const [date, time] = entry.forecastTimeUtc.split(' ');\r\n        const hour = time.substring(0, 5); // Get HH:MM format\r\n        \r\n        if (!days[date]) days[date] = {};\r\n        \r\n        days[date][hour] = {\r\n          temp: entry.airTemperature,\r\n          condition: entry.conditionCode || 'N/A',\r\n          wind: entry.windSpeed || 'N/A',\r\n          humidity: entry.relativeHumidity || 'N/A'\r\n        };\r\n        validEntries++;\r\n      } catch (entryError) {\r\n        console.warn('Skipping invalid forecast entry:', {\r\n          error: entryError.message,\r\n          entry\r\n        });\r\n      }\r\n    });\r\n\r\n    // Verify we have sufficient data\r\n    if (validEntries < 24) { // At least 24 hours of data\r\n      throw new Error(`Insufficient valid forecast data (${validEntries} entries)`);\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  // Load weather when city is selected\r\n  useEffect(() => {\r\n    if (selectedCity) {\r\n      const loadWeatherData = async () => {\r\n        try {\r\n          setLoading(prev => ({ ...prev, weather: true }));\r\n          setError(prev => ({ ...prev, weather: null }));\r\n          \r\n          const rawData = await fetchWeather(selectedCity.code);\r\n          const processedData = processWeatherData(rawData);\r\n          \r\n          setCurrentWeather(rawData.forecastTimestamps[0]);\r\n          setForecastData(processedData);\r\n          \r\n          // Update popular cities\r\n          setPopularCities(prev => {\r\n            const updated = [...prev];\r\n            const existingIndex = updated.findIndex(c => c.code === selectedCity.code);\r\n            \r\n            if (existingIndex >= 0) {\r\n              updated[existingIndex].views = (updated[existingIndex].views || 0) + 1;\r\n            } else {\r\n              updated.push({ ...selectedCity, views: 1 });\r\n            }\r\n            \r\n            return updated\r\n              .sort((a, b) => b.views - a.views)\r\n              .slice(0, 3);\r\n          });\r\n\r\n          await logCitySelection(selectedCity);\r\n        } catch (err) {\r\n          setError(prev => ({ \r\n            ...prev, \r\n            weather: `Failed to load weather: ${err.message}`\r\n          }));\r\n          console.error('Weather processing failed:', {\r\n            error: err,\r\n            city: selectedCity,\r\n            time: new Date().toISOString()\r\n          });\r\n        } finally {\r\n          setLoading(prev => ({ ...prev, weather: false }));\r\n        }\r\n      };\r\n\r\n      loadWeatherData();\r\n    }\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header>\r\n        <h1>Weather Forecast</h1>\r\n      </header>\r\n      \r\n      <main>\r\n        {/* City Selection Section */}\r\n        <div className=\"search-section\">\r\n          <CityDropdown \r\n            cities={availableCities}\r\n            onSelect={setSelectedCity} \r\n            popularCities={popularCities}\r\n            loading={loading.cities}\r\n            error={error.cities}\r\n          />\r\n          \r\n          {popularCities.length > 0 && (\r\n            <PopularCities \r\n              cities={popularCities} \r\n              onSelect={setSelectedCity} \r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Loading and Error States */}\r\n        {loading.weather && (\r\n          <div className=\"loading\">\r\n            <div className=\"spinner\"></div>\r\n            Loading weather data...\r\n          </div>\r\n        )}\r\n        \r\n        {error.weather && (\r\n          <div className=\"error\">\r\n            <p>{error.weather}</p>\r\n            <button \r\n              onClick={() => setSelectedCity({ ...selectedCity })} // Force re-fetch\r\n              className=\"retry-button\"\r\n            >\r\n              ↻ Retry\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Weather Display Section */}\r\n        {selectedCity && !loading.weather && !error.weather && (\r\n          <>\r\n            {currentWeather && (\r\n              <CurrentWeather \r\n                weather={currentWeather} \r\n                cityName={selectedCity.name} \r\n              />\r\n            )}\r\n            \r\n            {forecastData && (\r\n              <>\r\n                <HourlyForecast forecastData={forecastData} />\r\n                \r\n                {/* Debug view in development */}\r\n                {process.env.NODE_ENV === 'development' && (\r\n                  <details className=\"debug-view\">\r\n                    <summary>Raw API Data</summary>\r\n                    <pre>{JSON.stringify({\r\n                      selectedCity,\r\n                      currentWeather,\r\n                      forecastSample: Object.keys(forecastData).map(date => ({\r\n                        date,\r\n                        hours: Object.keys(forecastData[date]).length\r\n                      }))\r\n                    }, null, 2)}</pre>\r\n                  </details>\r\n                )}\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}